#!/usr/bin/env python
import functools
from pathlib import Path
from jinja2 import Environment
from jinja2 import FileSystemLoader
import yaml


@functools.cache
def context():
    with open("settings.yml", "r") as fp:
        settings = yaml.safe_load(fp)
    with open("secrets.yml", "r") as fp:
        secrets = yaml.safe_load(fp)
    domains = set()
    for name, service in settings["dockers"].items():
        if service.get("enabled", False):
            domains.add(secrets["services"][name]["domain"])
    settings["domains"] = list(domains)
    settings.update(secrets)
    return settings


def configure_docker_compose(env):
    t = env.get_template("docker-compose.yml.jinja")
    output = t.render(settings=context())

    with open("docker-compose.yml", "w") as fp:
        fp.write(output)


def configure_services(env):
    settings = context()
    for name, service in settings["dockers"].items():
        if name != "caddy" and not service.get("enabled", False):
            continue
        if tmpl := service.get("config_template"):
            if scheme := service.get("scheme"):
                tmpl = tmpl[scheme]
            t = env.get_template(tmpl)
            output = t.render(settings=settings)
            target = Path("config", name, Path(tmpl).stem)
            target.parent.mkdir(parents=True, exist_ok=True)
            with open(target, "w") as fp:
                fp.write(output)


def configure_files():
    Path("log/caddy").mkdir(parents=True, exist_ok=True)
    Path("log/v2ray").mkdir(parents=True, exist_ok=True)


def configure(env):
    configure_docker_compose(env)
    configure_services(env)
    configure_files()


if __name__ == "__main__":
    env = Environment(loader=FileSystemLoader("."))
    configure(env)
